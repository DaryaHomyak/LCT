version: '3.8'

services:
  # Основное приложение
  archive-ocr:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: archive-ocr-service
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./.env:/app/.env
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite:///./archive_service.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - archive-network

  # База данных PostgreSQL (опционально)
  postgres:
    image: postgres:15-alpine
    container_name: archive-postgres
    environment:
      POSTGRES_DB: archive_db
      POSTGRES_USER: archive_user
      POSTGRES_PASSWORD: secure_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - archive-network
    profiles:
      - postgres

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: archive-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - archive-network
    profiles:
      - redis

  # Nginx прокси (для продакшена)
  nginx:
    image: nginx:alpine
    container_name: archive-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - archive-ocr
    restart: unless-stopped
    networks:
      - archive-network
    profiles:
      - production

  # Prometheus для мониторинга (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: archive-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - archive-network
    profiles:
      - monitoring

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: archive-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_me
    restart: unless-stopped
    networks:
      - archive-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  archive-network:
    driver: bridge