#!/bin/bash

# ===========================================
# –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
# –ê—Ä—Ö–∏–≤–Ω—ã–π OCR –°–µ—Ä–≤–∏—Å
# ===========================================

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VM_NAME="archive-ocr-vm"
VM_DIR="/tmp/vm-build"
BASE_IMAGE="ubuntu-22.04-server-cloudimg-amd64.img"
BASE_IMAGE_URL="https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"

echo "üèóÔ∏è –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –í–ú –¥–ª—è –ê—Ä—Ö–∏–≤–Ω–æ–≥–æ OCR –°–µ—Ä–≤–∏—Å–∞"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    command -v qemu-img >/dev/null 2>&1 || { echo "‚ùå qemu-img –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install qemu-utils"; exit 1; }
    command -v virt-customize >/dev/null 2>&1 || { echo "‚ùå virt-customize –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install libguestfs-tools"; exit 1; }
    command -v genisoimage >/dev/null 2>&1 || { echo "‚ùå genisoimage –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install genisoimage"; exit 1; }
    
    echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
create_work_dir() {
    echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    rm -rf $VM_DIR
    mkdir -p $VM_DIR
    cd $VM_DIR
}

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
download_base_image() {
    echo "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ Ubuntu..."
    if [ ! -f "$BASE_IMAGE" ]; then
        wget -O "$BASE_IMAGE" "$BASE_IMAGE_URL"
    else
        echo "‚úÖ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö cloud-init
create_cloud_init() {
    echo "‚òÅÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ cloud-init..."
    
    cat > user-data << 'EOF'
#cloud-config
users:
  - default
  - name: archive-ocr
    groups: [sudo, docker]
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys: []

package_update: true
package_upgrade: true

packages:
  - python3
  - python3-pip
  - python3-venv
  - git
  - curl
  - wget
  - htop
  - nginx
  - docker.io
  - docker-compose
  - libgl1-mesa-glx
  - libglib2.0-0
  - libsm6
  - libxext6
  - libxrender-dev
  - libgomp1
  - libgtk-3-0
  - poppler-utils

write_files:
  - path: /opt/install-archive-ocr.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      
      echo "üèõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ê—Ä—Ö–∏–≤–Ω–æ–≥–æ OCR –°–µ—Ä–≤–∏—Å–∞..."
      
      # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      mkdir -p /opt/archive-ocr-service
      cd /opt/archive-ocr-service
      
      # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      useradd -m -s /bin/bash -G docker archive-ocr || true
      chown archive-ocr:archive-ocr /opt/archive-ocr-service
      
      # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
      # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      sudo -u archive-ocr mkdir -p uploads results static logs
      
      # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      sudo -u archive-ocr python3 -m venv venv
      sudo -u archive-ocr ./venv/bin/pip install --upgrade pip
      
      # –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
      cat > requirements.txt << 'EOL'
fastapi>=0.104.0
uvicorn[standard]>=0.24.0
aiofiles>=23.2.1
sqlalchemy>=2.0.0
opencv-python>=4.8.0
Pillow>=10.0.0
pdf2image>=3.1.0
numpy>=1.24.0
paddleocr>=2.7.0
paddlepaddle>=2.5.0
python-multipart>=0.0.6
python-dotenv>=1.0.0
EOL
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      sudo -u archive-ocr ./venv/bin/pip install -r requirements.txt
      
      # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
      sudo -u archive-ocr cat > .env << 'EOL'
DATABASE_URL=sqlite:///./archive_service.db
MAX_FILE_SIZE=104857600
HOST=0.0.0.0
PORT=8000
LOW_CONFIDENCE_THRESHOLD=0.75
USE_POSTPROCESSING=true
OCR_LANGUAGE=ru
USE_GPU=false
DEBUG=false
LOG_LEVEL=INFO
EOL
      
      # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
      cat > /etc/systemd/system/archive-ocr.service << 'EOL'
[Unit]
Description=Archive OCR Service
After=network.target

[Service]
Type=simple
User=archive-ocr
Group=archive-ocr
WorkingDirectory=/opt/archive-ocr-service
Environment=PATH=/opt/archive-ocr-service/venv/bin
ExecStart=/opt/archive-ocr-service/venv/bin/python web_service.py
Restart=always
RestartSec=3
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOL
      
      # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
      systemctl daemon-reload
      systemctl enable archive-ocr
      
      echo "‚úÖ –ê—Ä—Ö–∏–≤–Ω—ã–π OCR –°–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      echo "üìù –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
      echo "   cd /opt/archive-ocr-service"
      echo "   git clone <your-repo-url> ."
      echo "   systemctl start archive-ocr"

  - path: /etc/nginx/sites-available/archive-ocr
    content: |
      server {
          listen 80;
          server_name _;
          client_max_body_size 100M;
          
          location / {
              proxy_pass http://127.0.0.1:8000;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
          
          location /health {
              proxy_pass http://127.0.0.1:8000/health;
          }
      }

runcmd:
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu
  - usermod -aG docker archive-ocr
  - /opt/install-archive-ocr.sh
  - ln -sf /etc/nginx/sites-available/archive-ocr /etc/nginx/sites-enabled/
  - rm -f /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - systemctl enable nginx

final_message: |
  üéâ –ê—Ä—Ö–∏–≤–Ω—ã–π OCR –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
  
  üìç –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://<IP-–∞–¥—Ä–µ—Å>:8000
  üìç –° Nginx: http://<IP-–∞–¥—Ä–µ—Å>
  üìç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://<IP-–∞–¥—Ä–µ—Å>:8000/docs
  
  üîß –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
  1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤ /opt/archive-ocr-service
  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env
  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: systemctl start archive-ocr
  
  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
  - ubuntu (sudo –¥–æ—Å—Ç—É–ø)  
  - archive-ocr (–¥–ª—è —Å–µ—Ä–≤–∏—Å–∞)
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ meta-data
    cat > meta-data << EOF
instance-id: archive-ocr-$(date +%s)
local-hostname: archive-ocr-vm
EOF

    echo "‚úÖ Cloud-init –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ ISO —Å cloud-init –¥–∞–Ω–Ω—ã–º–∏
create_cloud_init_iso() {
    echo "üíø –°–æ–∑–¥–∞–Ω–∏–µ ISO —Å cloud-init –¥–∞–Ω–Ω—ã–º–∏..."
    genisoimage -output cloud-init.iso -volid cidata -joliet -rock user-data meta-data
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
resize_base_image() {
    echo "üìè –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –¥–æ 20GB..."
    cp "$BASE_IMAGE" "${VM_NAME}.qcow2"
    qemu-img resize "${VM_NAME}.qcow2" 20G
}

# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞
customize_image() {
    echo "‚öôÔ∏è –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞..."
    
    virt-customize \
        -a "${VM_NAME}.qcow2" \
        --run-command 'apt-get update && apt-get install -y cloud-init' \
        --run-command 'systemctl enable cloud-init' \
        --run-command 'systemctl enable cloud-config' \
        --run-command 'systemctl enable cloud-final' \
        --run-command 'cloud-init clean' \
        --run-command 'apt-get autoremove -y && apt-get clean' \
        --run-command 'rm -rf /var/lib/apt/lists/*' \
        --run-command 'history -c && history -w'
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
create_additional_formats() {
    echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ–±—Ä–∞–∑–æ–≤..."
    
    # VMDK –¥–ª—è VMware
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ VMDK –æ–±—Ä–∞–∑–∞..."
    qemu-img convert -f qcow2 -O vmdk -o subformat=streamOptimized \
        "${VM_NAME}.qcow2" "${VM_NAME}.vmdk"
    
    # RAW –æ–±—Ä–∞–∑
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ RAW –æ–±—Ä–∞–∑–∞..."
    qemu-img convert -f qcow2 -O raw "${VM_NAME}.qcow2" "${VM_NAME}.raw"
    
    # –°–∂–∞—Ç–∏–µ RAW –æ–±—Ä–∞–∑–∞
    echo "üóúÔ∏è –°–∂–∞—Ç–∏–µ RAW –æ–±—Ä–∞–∑–∞..."
    gzip -9 "${VM_NAME}.raw"
    
    # VDI –¥–ª—è VirtualBox
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ VDI –æ–±—Ä–∞–∑–∞..."
    qemu-img convert -f qcow2 -O vdi "${VM_NAME}.qcow2" "${VM_NAME}.vdi"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
create_checksums() {
    echo "üîê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º..."
    
    for file in "${VM_NAME}".{qcow2,vmdk,raw.gz,vdi}; do
        if [ -f "$file" ]; then
            sha256sum "$file" > "$file.sha256"
            md5sum "$file" > "$file.md5"
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
create_info_file() {
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    cat > "${VM_NAME}-info.txt" << EOF
üèõÔ∏è –ê–†–•–ò–í–ù–´–ô OCR –°–ï–†–í–ò–° - –û–ë–†–ê–ó–´ –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ú–ê–®–ò–ù
==================================================

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date)
üñ•Ô∏è –ë–∞–∑–æ–≤–∞—è –û–°: Ubuntu 22.04 LTS Server
üíæ –†–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞: 20GB
üß† –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è RAM: 8GB+
‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ CPU: 4+ —è–¥—Ä–∞

üì¶ –î–û–°–¢–£–ü–ù–´–ï –§–û–†–ú–ê–¢–´:
- ${VM_NAME}.qcow2     - QEMU/KVM —Ñ–æ—Ä–º–∞—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- ${VM_NAME}.vmdk      - VMware —Ñ–æ—Ä–º–∞—Ç
- ${VM_NAME}.raw.gz    - RAW —Ñ–æ—Ä–º–∞—Ç (—Å–∂–∞—Ç—ã–π)
- ${VM_NAME}.vdi       - VirtualBox —Ñ–æ—Ä–º–∞—Ç

üîê –ö–û–ù–¢–†–û–õ–¨–ù–´–ï –°–£–ú–ú–´:
–§–∞–π–ª—ã *.sha256 –∏ *.md5 —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.

üë§ –£–ß–ï–¢–ù–´–ï –ó–ê–ü–ò–°–ò:
- ubuntu       (–ø–∞—Ä–æ–ª—å: –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ–ª—å–∫–æ SSH –∫–ª—é—á–∏)
- archive-ocr  (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞)

üåê –°–ï–¢–ï–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:
- IP: –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ DHCP
- –ü–æ—Ä—Ç—ã: 22 (SSH), 80 (HTTP), 8000 (API)

üöÄ –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö:

1. QEMU/KVM:
   qemu-system-x86_64 -m 8G -smp 4 -hda ${VM_NAME}.qcow2 -netdev user,id=net0 -device virtio-net-pci,netdev=net0

2. VMware:
   - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ ${VM_NAME}.vmdk –∫–∞–∫ –Ω–æ–≤—É—é –í–ú
   - –í—ã–¥–µ–ª–∏—Ç–µ 8GB RAM –∏ 4 CPU

3. VirtualBox:
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –í–ú —Å ${VM_NAME}.vdi
   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ 8GB RAM –∏ 4 CPU

üìù –ó–ê–í–ï–†–®–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:

–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –ø–æ SSH –∫–∞–∫ ubuntu
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /opt/archive-ocr-service
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo systemctl start archive-ocr

üîó –î–û–°–¢–£–ü –ö –°–ï–†–í–ò–°–£:
- –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://<IP-–∞–¥—Ä–µ—Å>
- API: http://<IP-–∞–¥—Ä–µ—Å>:8000
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://<IP-–∞–¥—Ä–µ—Å>:8000/docs

‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
- –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç (–∑–∞–≥—Ä—É–∑–∫–∞ OCR –º–æ–¥–µ–ª–µ–π)
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è SSD –¥–∏—Å–∫ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ CUDA

üÜò –ü–û–î–î–ï–†–ñ–ö–ê:
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: deployment-guide.pdf
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –õ–¶–¢ 2025

EOF
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
test_image() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞..."
    
    echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ QCOW2:"
    qemu-img info "${VM_NAME}.qcow2"
    
    echo "üìÅ –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:"
    ls -lh "${VM_NAME}".*
    
    echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –£–ø–∞–∫–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
package_results() {
    echo "üì¶ –£–ø–∞–∫–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    
    mkdir -p ../release
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –æ–±—Ä–∞–∑–∞–º–∏
    tar -czf "../release/archive-ocr-vm-images-$(date +%Y%m%d).tar.gz" \
        "${VM_NAME}".* \
        cloud-init.iso \
        user-data \
        meta-data
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ release –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cp "${VM_NAME}".* "../release/"
    cp "${VM_NAME}-info.txt" "../release/README.txt"
    
    echo "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ../release/"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –í–ú..."
    
    check_dependencies
    create_work_dir
    download_base_image
    create_cloud_init
    create_cloud_init_iso
    resize_base_image
    customize_image
    create_additional_formats
    create_checksums
    create_info_file
    test_image
    package_results
    
    echo ""
    echo "üéâ –°–û–ó–î–ê–ù–ò–ï –û–ë–†–ê–ó–û–í –ó–ê–í–ï–†–®–ï–ù–û!"
    echo "=================================================="
    echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: $(pwd)/../release/"
    echo "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: README.txt"
    echo "üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º"
    echo ""
    echo "üöÄ –ì–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã:"
    echo "   - QEMU/KVM: ${VM_NAME}.qcow2"
    echo "   - VMware: ${VM_NAME}.vmdk"  
    echo "   - VirtualBox: ${VM_NAME}.vdi"
    echo "   - RAW: ${VM_NAME}.raw.gz"
    echo ""
    echo "üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ deployment-guide.pdf"
}

# –ó–∞–ø—É—Å–∫
main "$@"